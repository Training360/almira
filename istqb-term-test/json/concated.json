{
  "en": [
    {
      "name": "alpha testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Simulated or actual operational testing by potential users/customers or an independent test team at the developers' site, but outside the development organization. Alpha testing is often employed for commercial off-the-shelf software as a form of internal acceptance testing."
    },
    {
      "name": "beta testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["field testing"],
      "desc":
        "Operational testing by potential and/or existing users/customers at an external site not otherwise involved with the developers, to determine whether or not a component or system satisfies the user/customer needs and fits within the business processes. Beta testing is often employed as a form of external acceptance testing for commercial off-the-shelf software in order to acquire feedback from the market."
    },
    {
      "name": "black-box test design technique",
      "ref": null,
      "seeAlso": null,
      "synonyms": [
        "black-box technique",
        "specification-based technique",
        "specification-based test design technique"
      ],
      "desc":
        "Procedure to derive and/or select test cases based on an analysis of the specification, either functional or non-functional, of a component or system without reference to its internal structure."
    },
    {
      "name": "black-box testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["specification-based testing"],
      "desc":
        "Testing, either functional or non-functional, without reference to the internal structure of the component or system."
    },
    {
      "name": "boundary value analysis",
      "ref": null,
      "seeAlso": ["boundary value"],
      "synonyms": null,
      "desc":
        "A black-box test design technique in which test cases are designed based on boundary values."
    },
    {
      "name": "code coverage",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "An analysis method that determines which parts of the software have been executed (covered) by the test suite and which parts have not been executed, e.g., statement coverage, decision coverage or condition coverage."
    },
    {
      "name": "commercial off-the-shelf (COTS)",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["off-the-shelf software"],
      "desc":
        "A software product that is developed for the general market, i.e. for a large number of customers, and that is delivered to many customers in identical format."
    },
    {
      "name": "compiler",
      "ref": "IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A software tool that translates programs expressed in a high-order language into their machine language equivalents."
    },
    {
      "name": "complexity",
      "ref": null,
      "seeAlso": ["cyclomatic complexity"],
      "synonyms": null,
      "desc":
        "The degree to which a component or system has a design and/or internal structure that is difficult to understand, maintain and verify."
    },
    {
      "name": "component testing",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": ["module testing", "program testing", "unit testing"],
      "desc": "The testing of individual software components."
    },
    {
      "name": "configuration management",
      "ref": "IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A discipline applying technical and administrative direction and surveillance to identify and document the functional and physical characteristics of a configuration item, control changes to those characteristics, record and report change processing and implementation status, and verify compliance with specified requirements."
    },
    {
      "name": "configuration management tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that provides support for the identification and control of configuration items, their status over changes and versions, and the release of baselines consisting of configuration items."
    },
    {
      "name": "control flow",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A sequence of events (paths) in the execution through a component or system."
    },
    {
      "name": "coverage tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["coverage measurement tool"],
      "desc":
        "A tool that provides objective measures of what structural elements, e.g., statements, branches have been exercised by a test suite."
    },
    {
      "name": "data flow",
      "ref": "Beiser",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "An abstract representation of the sequence and possible changes of the state of data objects, where the state of an object is any of creation, usage, or destruction."
    },
    {
      "name": "data-driven testing",
      "ref": "Fewster and Graham",
      "seeAlso": ["keyword-driven testing"],
      "synonyms": null,
      "desc":
        "A scripting technique that stores test input and expected results in a table or spreadsheet, so that a single control script can execute all of the tests in the table. Data-driven testing is often used to support the application of test execution tools such as capture/playback tools."
    },
    {
      "name": "debugging",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The process of finding, analyzing and removing the causes of failures in software."
    },
    {
      "name": "debugging tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["debugger"],
      "desc":
        "A tool used by programmers to reproduce failures, investigate the state of programs and find the corresponding defect. Debuggers enable programmers to execute programs step by step, to halt a program at any program statement and to set and examine program variables."
    },
    {
      "name": "decision coverage",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The percentage of decision outcomes that have been exercised by a test suite. 100% decision coverage implies both 100% branch coverage and 100% statement coverage."
    },
    {
      "name": "decision table testing",
      "ref": "Egler63",
      "seeAlso": ["decision table"],
      "synonyms": null,
      "desc":
        "A black-box test design technique in which test cases are designed to execute the combinations of inputs and/or stimuli (causes) shown in a decision table."
    },
    {
      "name": "defect",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["bug", "fault", "problem"],
      "desc":
        "A flaw in a component or system that can cause the component or system to fail to perform its required function, e.g., an incorrect statement or data definition. A defect, if encountered during execution, may cause a failure of the component or system."
    },
    {
      "name": "defect density",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["fault density"],
      "desc":
        "The number of defects identified in a component or system divided by the size of the component or system (expressed in standard measurement terms, e.g., lines-of-code, number of classes or function points)."
    },
    {
      "name": "driver",
      "ref": "After TMap",
      "seeAlso": null,
      "synonyms": ["test driver"],
      "desc":
        "A software component or test tool that replaces a component that takes care of the control and/or the calling of a component or system."
    },
    {
      "name": "dynamic analysis tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that provides run-time information on the state of the software code. These tools are most commonly used to identify unassigned pointer check pointer arithmetic and to monitor the allocation, use and de-allocation of memory and to flag memory leaks."
    },
    {
      "name": "dynamic testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing that involves the execution of the software of a component or system."
    },
    {
      "name": "entry criteria",
      "ref": "Gilb and Graham",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The set of generic and specific conditions for permitting a process to go forward with a defined task, e.g., test phase. The purpose of entry criteria is to prevent a task from starting which would entail more (wasted) effort compared to the effort needed to remove the failed entry criteria."
    },
    {
      "name": "equivalence partitioning",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["partition testing"],
      "desc":
        "A black-box test design technique in which test cases are designed to execute representatives from equivalence partitions. In principle, test cases are designed to cover each partition at least once."
    },
    {
      "name": "error",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": ["mistake"],
      "desc": "A human action that produces an incorrect result."
    },
    {
      "name": "error guessing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A test design technique where the experience of the tester is used to anticipate what defects might be present in the component or system under test as a result of errors made, and to design tests specifically to expose them."
    },
    {
      "name": "exhaustive testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["complete testing"],
      "desc":
        "A test approach in which the test suite comprises all combinations of input values and preconditions."
    },
    {
      "name": "exit criteria",
      "ref": "After Gilb and Graham",
      "seeAlso": null,
      "synonyms": ["completion criteria", "test completion criteria"],
      "desc":
        "The set of generic and specific conditions, agreed upon with the stakeholders for permitting a process to be officially completed. The purpose o exit criteria is to prevent a task from being considered completed when there are still outstanding parts of the task which have not been finished Exit criteria are used to report against and to plan when to stop testing."
    },
    {
      "name": "exploratory testing",
      "ref": "After Bach",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "An informal test design technique where the tester actively controls the design of the tests as those tests are performed and uses information gained while testing to design new and better tests."
    },
    {
      "name": "failure",
      "ref": "After Fenton",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Deviation of the component or system from its expected delivery, service or result."
    },
    {
      "name": "failure rate",
      "ref": "IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The ratio of the number of failures of a given category to a given unit of measure, e.g., failures per unit of time, failures per number of transactions, failures per number of computer runs."
    },
    {
      "name": "fault attack",
      "ref": null,
      "seeAlso": ["negative testing", "security attack"],
      "synonyms": ["attack"],
      "desc":
        "Directed and focused attempt to evaluate a specific quality characteristic of a test object by attempting to force specific failures to occur. Usuall focused on reliability or security."
    },
    {
      "name": "formal review",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A review characterized by documented procedures and requirements, e.g., inspection."
    },
    {
      "name": "functional requirement",
      "ref": "IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A requirement that specifies a function that a component or system must perform."
    },
    {
      "name": "functional testing",
      "ref": null,
      "seeAlso": ["black-box testing"],
      "synonyms": null,
      "desc":
        "Testing based on an analysis of the specification of the functionality of a component or system."
    },
    {
      "name": "impact analysis",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The assessment of change to the layers of development documentation, test documentation and components, in order to implement a given change to specified requirements."
    },
    {
      "name": "incident",
      "ref": "After IEEE 1008",
      "seeAlso": null,
      "synonyms": ["deviation", "software test incident", "test incident"],
      "desc": "Any event occurring that requires investigation."
    },
    {
      "name": "incident logging",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Recording the details of any incident that occurred, e.g., during testing."
    },
    {
      "name": "incident management",
      "ref": "After IEEE 1044",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The process of recognizing, investigating, taking action and disposing of incidents. It involves logging incidents, classifying them and identifying the impact."
    },
    {
      "name": "incident management tool",
      "ref": null,
      "seeAlso": ["defect management tool"],
      "synonyms": null,
      "desc":
        "A tool that facilitates the recording and status tracking of incidents. They often have workflow-oriented facilities to track and control the allocation, correction and re-testing of incidents and provide reporting facilities."
    },
    {
      "name": "incident report",
      "ref": "After IEEE 829",
      "seeAlso": null,
      "synonyms": [
        "deviation report",
        "software test incident report",
        "test incident report"
      ],
      "desc":
        "A document reporting on any event that occurred, e.g., during the testing, which requires investigation."
    },
    {
      "name": "incremental development model",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A development lifecycle where a project is broken into a series of increments, each of which delivers a portion of the functionality in the overall project requirements. The requirements are prioritized and delivered in priority order in the appropriate increment. In some (but not all) versions of this lifecycle model, each subproject follows a mini V-model with its own design, coding and testing phases."
    },
    {
      "name": "informal review",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "A review not based on a formal (documented) procedure."
    },
    {
      "name": "inspection",
      "ref": "After IEEE 610, IEEE 1028",
      "seeAlso": ["peer review"],
      "synonyms": null,
      "desc":
        "A type of peer review that relies on visual examination of documents to detect defects, e.g., violations of development standards and non- conformance to higher level documentation. The most formal review technique and therefore always based on a documented procedure."
    },
    {
      "name": "integration",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The process of combining components or systems into larger assemblies."
    },
    {
      "name": "integration testing",
      "ref": null,
      "seeAlso": [
        "component integration testing",
        "system integration testing"
      ],
      "synonyms": null,
      "desc":
        "Testing performed to expose defects in the interfaces and in the interactions between integrated components or systems."
    },
    {
      "name": "interoperability testing",
      "ref": null,
      "seeAlso": ["functionality testing"],
      "synonyms": ["compatibility testing"],
      "desc": "Testing to determine the interoperability of a software product."
    },
    {
      "name": "iterative development model",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A development lifecycle where a project is broken into a usually large number of iterations. An iteration is a complete development loop   resulting in a release (internal or external) of an executable product, a subset of the final product under development, which grows from iteratio to iteration to become the final product."
    },
    {
      "name": "keyword-driven testing",
      "ref": null,
      "seeAlso": ["data-driven testing"],
      "synonyms": ["action word-driven testing"],
      "desc":
        "A scripting technique that uses data files to contain not only test data and expected results, but also keywords related to the application being tested. The keywords are interpreted by special supporting scripts that are called by the control script for the test."
    },
    {
      "name": "load testing",
      "ref": null,
      "seeAlso": ["performance testing", "stress testing"],
      "synonyms": null,
      "desc":
        "A type of performance testing conducted to evaluate the behavior of a component or system with increasing load, e.g., numbers of parallel users and/or numbers of transactions, to determine what load can be handled by the component or system."
    },
    {
      "name": "maintainability testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["serviceability testing"],
      "desc": "Testing to determine the maintainability of a software product."
    },
    {
      "name": "maintenance testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing the changes to an operational system or the impact of a changed environment to an operational system."
    },
    {
      "name": "metric",
      "ref": "ISO 14598",
      "seeAlso": null,
      "synonyms": null,
      "desc": "A measurement scale and the method used for measurement."
    },
    {
      "name": "non-functional requirement",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A requirement that does not relate to functionality, but to attributes such as reliability, efficiency, usability, maintainability and portability."
    },
    {
      "name": "peer review",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A review of a software work product by colleagues of the producer of the product for the purpose of identifying defects and improvements. Examples are inspection, technical review and walkthrough."
    },
    {
      "name": "performance testing",
      "ref": null,
      "seeAlso": ["efficiency testing"],
      "synonyms": null,
      "desc": "Testing to determine the performance of a software product."
    },
    {
      "name": "performance testing tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool to support performance testing that usually has two main facilities: load generation and test transaction measurement. Load generation can simulate either multiple users or high volumes of input data. During execution, response time measurements are taken from selected transactions and these are logged. Performance testing tools normally provide reports based on test logs and graphs of load against response times."
    },
    {
      "name": "portability testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["configuration testing"],
      "desc": "Testing to determine the portability of a software product."
    },
    {
      "name": "product risk",
      "ref": null,
      "seeAlso": ["risk"],
      "synonyms": null,
      "desc": "A risk directly related to the test object."
    },
    {
      "name": "project risk",
      "ref": null,
      "seeAlso": ["risk"],
      "synonyms": null,
      "desc":
        "A risk related to management and control of the (test) project, e.g., lack of staffing, strict deadlines, changing requirements, etc."
    },
    {
      "name": "quality",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The degree to which a component, system or process meets specified requirements and/or user/customer needs and expectations."
    },
    {
      "name": "regression testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing of a previously tested program following modification to ensure that defects have not been introduced or uncovered in unchanged area of the software, as a result of the changes made. It is performed when the software or its environment is changed."
    },
    {
      "name": "reliability testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "Testing to determine the reliability of a software product."
    },
    {
      "name": "requirement",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A condition or capability needed by a user to solve a problem or achieve an objective that must be met or possessed by a system or system component to satisfy a contract, standard, specification, or other formally imposed document."
    },
    {
      "name": "requirements management tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that supports the recording of requirements, requirements attributes (e.g., priority, knowledge responsible) and annotation, and facilitates traceability through layers of requirements and requirements change management. Some requirements management tools also provide   facilities for static analysis, such as consistency checking and violations to pre-defined requirements rules."
    },
    {
      "name": "review",
      "ref": "After IEEE 1028",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "An evaluation of a product or project status to ascertain discrepancies from planned results and to recommend improvements. Examples include management review, informal review, technical review, inspection, and walkthrough."
    },
    {
      "name": "review tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that provides support to the review process. Typical features include review planning and tracking support, communication support, collaborative reviews and a repository for collecting and reporting of metrics."
    },
    {
      "name": "reviewer",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["checker", "inspector"],
      "desc":
        "The person involved in the review that identifies and describes anomalies in the product or project under review. Reviewers can be chosen to represent different viewpoints and roles in the review process."
    },
    {
      "name": "risk",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "A factor that could result in future negative consequences."
    },
    {
      "name": "risk-based testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "An approach to testing to reduce the level of product risks and inform stakeholders of their status, starting in the initial stages of a project. It involves the identification of product risks and the use of risk levels to guide the test process."
    },
    {
      "name": "robustness testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "Testing to determine the robustness of the software product."
    },
    {
      "name": "scribe",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["recorder"],
      "desc":
        "The person who records each defect mentioned and any suggestions for process improvement during a review meeting, on a logging form. Th scribe should ensure that the logging form is readable and understandable."
    },
    {
      "name": "scripting language",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A programming language in which executable test scripts are written, used by a test execution tool (e.g., a capture/playback tool)."
    },
    {
      "name": "security testing",
      "ref": null,
      "seeAlso": ["functionality testing"],
      "synonyms": null,
      "desc": "Testing to determine the security of the software product."
    },
    {
      "name": "security tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "A tool that supports operational security."
    },
    {
      "name": "stability",
      "ref": "ISO 9126",
      "seeAlso": ["maintainability"],
      "synonyms": null,
      "desc":
        "The capability of the software product to avoid unexpected effects from modifications in the software."
    },
    {
      "name": "state transition testing",
      "ref": null,
      "seeAlso": ["N-switch testing"],
      "synonyms": ["finite state testing"],
      "desc":
        "A black-box test design technique in which test cases are designed to execute valid and invalid state transitions."
    },
    {
      "name": "statement coverage",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The percentage of executable statements that have been exercised by a test suite."
    },
    {
      "name": "static testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing of a software development artifact, e.g., requirements, design or code, without execution of these artifacts, e.g., reviews or static analysis."
    },
    {
      "name": "stress testing",
      "ref": "After IEEE 610",
      "seeAlso": ["performance testing", "load testing"],
      "synonyms": null,
      "desc":
        "A type of performance testing conducted to evaluate a system or component at or beyond the limits of its anticipated or specified workloads, or with reduced availability of resources such as access to memory or servers."
    },
    {
      "name": "stress testing tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "A tool that supports stress testing."
    },
    {
      "name": "stub",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A skeletal or special-purpose implementation of a software component, used to develop or test a component that calls or is otherwise dependent on it. It replaces a called component."
    },
    {
      "name": "system testing",
      "ref": "Hetzel",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing an integrated system to verify that it meets specified requirements."
    },
    {
      "name": "technical review",
      "ref": "Gilb and Graham, IEEE 1028",
      "seeAlso": ["peer review"],
      "synonyms": null,
      "desc":
        "A peer group discussion activity that focuses on achieving consensus on the technical approach to be taken."
    },
    {
      "name": "test approach",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The implementation of the test strategy for a specific project. It typically includes the decisions made that follow based on the (test) project's goal and the risk assessment carried out, starting points regarding the test process, the test design techniques to be applied, exit criteria and test types to be performed."
    },
    {
      "name": "test basis",
      "ref": "After TMap",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "All documents from which the requirements of a component or system can be inferred. The documentation on which the test cases are based. a document can be amended only by way of formal amendment procedure, then the test basis is called a frozen test basis."
    },
    {
      "name": "test case",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A set of input values, execution preconditions, expected results and execution postconditions, developed for a particular objective or test condition, such as to exercise a particular program path or to verify compliance with a specific requirement."
    },
    {
      "name": "test case specification",
      "ref": "After IEEE 829",
      "seeAlso": ["test specification"],
      "synonyms": null,
      "desc":
        "A document specifying a set of test cases (objective, inputs, test actions, expected results, and execution preconditions) for a test item."
    },
    {
      "name": "test comparator",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["comparator"],
      "desc":
        "A test tool to perform automated test comparison of actual results with expected results."
    },
    {
      "name": "test condition",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["test requirement", "test situation"],
      "desc":
        "An item or event of a component or system that could be verified by one or more test cases, e.g., a function, transaction, feature, quality attribute, or structural element."
    },
    {
      "name": "test control",
      "ref": null,
      "seeAlso": ["test management"],
      "synonyms": null,
      "desc":
        "A test management task that deals with developing and applying a set of corrective actions to get a test project on track when monitoring show  a deviation from what was planned."
    },
    {
      "name": "test data",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Data that exists (for example, in a database) before a test is executed, and that affects or is affected by the component or system under test."
    },
    {
      "name": "test data preparation tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["test generator"],
      "desc":
        "A type of test tool that enables data to be selected from existing databases or created, generated, manipulated and edited for use in testing."
    },
    {
      "name": "test design",
      "ref": null,
      "seeAlso": ["test design specification"],
      "synonyms": null,
      "desc":
        "The process of transforming general test objectives into tangible test conditions and test cases."
    },
    {
      "name": "test design technique",
      "ref": null,
      "seeAlso": null,
      "synonyms": [
        "test case design technique",
        "test specification technique",
        "test technique"
      ],
      "desc": "Procedure used to derive and/or select test cases."
    },
    {
      "name": "test design tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that supports the test design activity by generating test inputs from a specification that may be held in a CASE tool repository, e.g., requirements management tool, from specified test conditions held in the tool itself, or from code."
    },
    {
      "name": "test environment",
      "ref": "After IEEE 610",
      "seeAlso": null,
      "synonyms": ["test bed", "test rig"],
      "desc":
        "An environment containing hardware, instrumentation, simulators, software tools, and other support elements needed to conduct a test."
    },
    {
      "name": "test execution",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The process of running a test on the component or system under test, producing actual result(s)."
    },
    {
      "name": "test execution tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A type of test tool that is able to execute other software using an automated test script, e.g., capture/playback."
    },
    {
      "name": "test harness",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A test environment comprised of stubs and drivers needed to execute a test."
    },
    {
      "name": "test level",
      "ref": "After TMap",
      "seeAlso": null,
      "synonyms": ["test stage"],
      "desc":
        "A group of test activities that are organized and managed together. A test level is linked to the responsibilities in a project. Examples of test levels are component test, integration test, system test and acceptance test."
    },
    {
      "name": "test log",
      "ref": "IEEE 829",
      "seeAlso": null,
      "synonyms": ["test record", "test run log"],
      "desc":
        "A chronological record of relevant details about the execution of tests."
    },
    {
      "name": "test management tool",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that provides support to the test management and control part of a test process. It often has several capabilities, such as testware management, scheduling of tests, the logging of results, progress tracking, incident management and test reporting."
    },
    {
      "name": "test manager",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["test leader"],
      "desc":
        "The person responsible for project management of testing activities and resources, and evaluation of a test object. The individual who directs, controls, administers, plans and regulates the evaluation of a test object."
    },
    {
      "name": "test objective",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "A reason or purpose for designing and executing a test."
    },
    {
      "name": "test plan",
      "ref": "After IEEE 829",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A document describing the scope, approach, resources and schedule of intended test activities. It identifies amongst others test items, the features to be tested, the testing tasks, who will do each task, degree of tester independence, the test environment, the test design techniques and entry and exit criteria to be used, and the rationale for their choice, and any risks requiring contingency planning. It is a record of the test planning process."
    },
    {
      "name": "test policy",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A high-level document describing the principles, approach and major objectives of the organization regarding testing."
    },
    {
      "name": "test procedure specification",
      "ref": "After IEEE 829",
      "seeAlso": ["test specification"],
      "synonyms": ["test procedure", "test scenario"],
      "desc":
        "A document specifying a sequence of actions for the execution of a test. Also known as test script or manual test script."
    },
    {
      "name": "test reporting",
      "ref": null,
      "seeAlso": ["test process"],
      "synonyms": null,
      "desc":
        "Collecting and analyzing data from testing activities and subsequently consolidating the data in a report to inform stakeholders."
    },
    {
      "name": "test script",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Commonly used to refer to a test procedure specification, especially an automated one."
    },
    {
      "name": "test strategy",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A high-level description of the test levels to be performed and the testing within those levels for an organization or programme (one or more projects)."
    },
    {
      "name": "test summary report",
      "ref": "After IEEE 829",
      "seeAlso": null,
      "synonyms": ["test report"],
      "desc":
        "A document summarizing testing activities and results. It also contains an evaluation of the corresponding test items against exit criteria."
    },
    {
      "name": "test-driven development (TDD)",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A way of developing software where the test cases are developed, and often automated, before the software is developed to run those test cases."
    },
    {
      "name": "tester",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A skilled professional who is involved in the testing of a component or system."
    },
    {
      "name": "testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "The process consisting of all lifecycle activities, both static and dynamic, concerned with planning, preparation and evaluation of software products and related work products to determine that they satisfy specified requirements, to demonstrate that they are fit for purpose and to detect defects."
    },
    {
      "name": "testware",
      "ref": "After Fewster and Graham",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Artifacts produced during the test process required to plan, design, and execute tests, such as documentation, scripts, inputs, expected results set-up and clear-up procedures, files, databases, environment, and any additional software or utilities used in testing."
    },
    {
      "name": "traceability",
      "ref": null,
      "seeAlso": ["horizontal traceability", "vertical traceability"],
      "synonyms": null,
      "desc":
        "The ability to identify related items in documentation and software, such as requirements with associated tests."
    },
    {
      "name": "unit test framework",
      "ref": "Graham",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A tool that provides an environment for unit or component testing in which a component can be tested in isolation or with suitable stubs and drivers. It also provides other support for the developer, such as debugging capabilities."
    },
    {
      "name": "usability testing",
      "ref": "After ISO 9126",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Testing to determine the extent to which the software product is understood, easy to learn, easy to operate and attractive to the users under specified conditions."
    },
    {
      "name": "use case testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": ["scenario testing", "user scenario testing"],
      "desc":
        "A black-box test design technique in which test cases are designed to execute scenarios of use cases."
    },
    {
      "name": "V-model",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A framework to describe the software development lifecycle activities from requirements specification to maintenance. The V-model illustrates how testing activities can be integrated into each phase of the software development lifecycle."
    },
    {
      "name": "validation",
      "ref": "ISO 9000",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled."
    },
    {
      "name": "verification",
      "ref": "ISO 9000",
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "Confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled."
    },
    {
      "name": "walkthrough",
      "ref": "Freedman and Weinberg, IEEE 1028",
      "seeAlso": ["peer review"],
      "synonyms": ["structured walkthrough"],
      "desc":
        "A step-by-step presentation by the author of a document in order to gather information and to establish a common understanding of its content."
    },
    {
      "name": "white-box test design technique",
      "ref": null,
      "seeAlso": null,
      "synonyms": [
        "structural test design technique",
        "structure-based test design technique",
        "structure-based technique",
        "white-box technique"
      ],
      "desc":
        "Procedure to derive and/or select test cases based on an analysis of the internal structure of a component or system."
    },
    {
      "name": "white-box testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": [
        "clear-box testing",
        "code-based testing",
        "glass-box testing",
        "logic-coverage testing",
        "logic-driven testing",
        "structural testing",
        "structure-based testing"
      ],
      "desc":
        "Testing based on an analysis of the internal structure of the component or system."
    },
    {
      "name": "traceability matrix",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A two-dimensional table, which correlates two entities (e.g., requirements and test cases). The table allows tracing back and forth the links of one entity to the other, thus enabling the determination of coverage achieved and the assessment of impact of proposed changes."
    },
    {
      "name": "safety testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc": "Testing to determine the safety of a software product."
    },
    {
      "name": "condition testing",
      "ref": null,
      "seeAlso": null,
      "synonyms": null,
      "desc":
        "A white-box test design technique in which test cases are designed to execute condition outcomes."
    }
  ],
  "hu": [
    {
      "name": "adatfolyam",
      "engNames": ["data flow"],
      "desc":
        "az adatobjektumok állapotsorrendjének, valamint lehetséges változásainak absztrakt megjelenítése, ahol az objektum állapota létrehozás, használat, illetve megszüntetés lehet."
    },
    {
      "name": "adatvezérelt teszt",
      "engNames": ["data-driven testing"],
      "desc":
        "olyan szkript módszer, amely egy táblázatban tárolja a bemeneteket és az elvárt értékeket oly módon, hogy egy vezérlő szkript minden tesztet végre tud hajtani belőle. Az adatvezérelt tesztet gyakran használják pl. felvevő/lejátszó tesztelő eszközök használatának támogatására."
    },
    {
      "name": "alfa teszt",
      "engNames": ["alpha testing"],
      "desc":
        "szimulált, vagy tényleges tesztelés, amelyet potenciális felhasználók, vagy egy független tesztcsapat végez a fejlesztés helyszínén, de a fejlesztői szervezettől függetlenül. Gyakran használják dobozos szoftverek belső átvételi tesztjeihez."
    },
    {
      "name": "állapotátmenet teszt",
      "engNames": ["state transition testing"],
      "desc":
        "olyan feketedoboz teszttervezési technika, amiben úgy tervezzük meg a teszteseteket, hogy érvényes és érvénytelen állapotátmeneteket generáljanak."
    },
    {
      "name": "átvizsgálás",
      "engNames": ["walkthrough"],
      "desc":
        "egy dokumentum szerzője által végzett lépésenkénti bemutató abból a célból, hogy információt gyűjtsön vagy közös álláspontot alakítson ki."
    },
    {
      "name": "belépési feltétel",
      "engNames": ["entry criteria"],
      "desc":
        "általános és speciális feltételek halmaza, amely engedélyezi egy adott feladat végrehajtását. Az a cél, hogy ne indítsunk olyan feladatokat, amelyek több elvesztetegetett ráfordítást jelentenének, mint az elbukó belépési feltételek kijavítása"
    },
    {
      "name": "béta teszt",
      "engNames": ["beta testing", "field testing"],
      "desc":
        "a szoftvernek egy szűkebb felhasználói körben való külső tesztelése a végső kiadás előtt annak érdekében, hogy meghatározzuk, a szoftver megfelel-e a felhasználók piaci igényeinek. Gyakran megfelel a dobozos (COTS) szoftverek külső átvételi tesztjének."
    },
    {
      "name": "biztonsági teszt",
      "engNames": ["security testing", "safety testing"],
      "desc": "olyan teszt, amivel a szoftvertermék biztonságát határozzuk meg."
    },
    {
      "name": "biztonsági eszköz",
      "engNames": ["security tool"],
      "desc": "olyan eszköz, ami a működési biztonságot támogatja."
    },
    {
      "name": "csonk",
      "engNames": ["stub"],
      "desc":
        "egy szoftver komponens speciális célú vagy részleges megvalósítása. A csonkot arra használjuk, hogy támogassuk a komponens(ek) fejlesztését vagy tesztelését. Helyettesíti a meghívott komponenst."
    },
    {
      "name": "dinamikus elemző eszköz",
      "engNames": ["dynamic analysis tool"],
      "desc":
        "a szoftverkód állapotáról futási időben információt szolgáltató eszköz. Leggyakrabban érvénytelen mutatók, memóriafoglalások – és törlések, illetve memóriaszivárgások felderítésére használják."
    },
    {
      "name": "dinamikus teszt",
      "engNames": ["dynamic testing"],
      "desc":
        "olyan teszt, amely magában foglalja egy komponens vagy rendszer szoftverének futtatását."
    },
    {
      "name": "dobozos szoftver",
      "engNames": ["off-the-shelf software", "commercial off-the-shelf (COTS)"],
      "desc":
        "egy, az általános piaci igényeknek megfelelő szoftvertermék, pl.: nagy számú vevő számára, amely minden vásárlónak hasonló, megjelenéssel érhető el."
    },
    {
      "name": "döntési lefedettség",
      "engNames": ["decision coverage"],
      "desc":
        "a tesztkészlet végrehajtása során a döntési eredmények meghívásának százalékos végrehajtási aránya. 100%-os döntési lefedettség 100%-os elágazási lefedettséget és 100%-os utasítás lefedettséget jelent."
    },
    {
      "name": "döntési tábla teszt",
      "engNames": ["decision table testing"],
      "desc":
        "feketedoboz teszttervezési módszer, amely során olyan teszteseteket tervezünk, amelyek a döntési táblában szereplő különböző okok és bemenetek kombinációit igyekeznek tesztelni."
    },
    {
      "name": "egyenrangú felülvizsgálat",
      "engNames": ["peer review"],
      "desc":
        "egy szoftver-munkatermék felülvizsgálata a termék előállítójának munkatársai által, amelynek célja, hogy hibákat fedezzen fel illetve javító javaslatokat hozzon. Példák: inspekció, technikai felülvizsgálat, átvizsgálás."
    },
    {
      "name": "egységteszt keretrendszer",
      "engNames": ["unit test framework"],
      "desc":
        "olyan környezetet biztosító keretrendszer, amelyben egy komponens egyaránt tesztelhető különállóan valamint a megfelelő segédprogramokkal. Hibakeresési funkciójával támogatja a szoftverfejlesztő munkáját is."
    },
    {
      "name": "együttműködő képességi teszt",
      "engNames": ["interoperability testing"],
      "desc": "egy adott szoftver együttműködő-képességének vizsgálata."
    },
    {
      "name": "ekvivalencia partícionálás",
      "engNames": ["equivalence partitioning"],
      "desc":
        "feketedoboz tesztelési módszer, amely során olyan teszteseteket készítünk, amelyek az ekvivalencia partíciók egyes reprezentánsait tesztelik. Jellemzően minden egyes ekvivalencia partíciót érdemes legalább egyszer lefedni."
    },
    {
      "name": "emberi eredetű hiba",
      "engNames": ["error", "mistake"],
      "desc": "emberi tevékenység, amely során helytelen eredmény jön létre."
    },
    {
      "name": "fehérdoboz teszt",
      "engNames": [
        "white-box testing",
        "glass-box testing",
        "clear-box testing"
      ],
      "desc": "a szoftver belső struktúrájának elemzésén alapuló tesztelés"
    },
    {
      "name": "fehérdoboz teszttervezési technika",
      "engNames": ["white-box test design technique"],
      "desc":
        "olyan eljárás, amely a teszteseteit egy komponens vagy rendszer belső struktúrájának elemzéséből származtatja."
    },
    {
      "name": "feketedoboz teszt",
      "engNames": ["black-box testing"],
      "desc":
        "a program belső szerkezetére történő hivatkozás nélküli funkcionális, vagy nem-funkcionális teszt."
    },
    {
      "name": "feketedoboz teszttervezési technika",
      "engNames": [
        "black-box test design technique",
        "black-box test design technique"
      ],
      "desc":
        "olyan módszer, amelynél a szoftver specifikáció alapján, a program belső szerkezetének ismerete nélkül tervezünk teszteket."
    },
    {
      "name": "ATA,F-AT felderítő teszt",
      "engNames": ["exploratory testing"],
      "desc":
        "informális teszttervezési módszer, amely során a tesztelő aktívan felügyeli a tesztek tervezését, a futtatás során szerzett információkat összegyűjti és hasznosítja új és jobb tesztek tervezése érdekében"
    },
    {
      "name": "feltétel teszt",
      "engNames": ["condition testing"],
      "desc":
        "olyan fehérdoboz tesztelési módszer, amely során a tesztesetek feltételekhez tartoznak."
    },
    {
      "name": "felülvizsgálat",
      "engNames": ["review"],
      "desc":
        "egy termék vagy projekt státuszának értékelése. Célja, hogy feltérképezze az eltéréseket a tervezett eredményekhez képest, valamint ajánlást tegyen a továbblépéshez. Több típusa van, például: menedzsment felülvizsgálat, informális felülvizsgálat, technikai felülvizsgálat, inspekció, átvizsgálás."
    },
    {
      "name": "felülvizsgáló",
      "engNames": ["reviewer"],
      "desc":
        "a felülvizsgálaton résztvevő személy, aki azonosítja és leírja a termékben vagy projektben azonosított eltéréseket. A felülvizsgálókat célszerű úgy kiválasztani, hogy többféle nézőpontot, szerepkört képviseljenek."
    },
    {
      "name": "felülvizsgáló eszköz",
      "engNames": ["review tool"],
      "desc":
        "olyan eszköz, ami a felülvizsgálat folyamatát támogatja. Jellemzően a felülvizsgálatok tervezését, a változáskövetést, a felülvizsgálók közötti kommunikációt, közös felülvizsgálat végzését támogatja. Ezek mellett a mérőszámok egyfajta gyűjtőhelyeként, valamint az azokat tartalmazó jelentések alapjául is szolgál."
    },
    {
      "name": "fordítóprogram",
      "engNames": ["compiler"],
      "desc":
        "egy olyan szoftver eszköz, amely a magas szintű programnyelvi kifejezéseket a gépi kódú megfelelőjére fordítja."
    },
    {
      "name": "formális felülvizsgálat",
      "engNames": ["formal review"],
      "desc":
        "dokumentált eljárásokal és követelményekkel (pl. inspekcióval) jellemzett felülvizsgálat."
    },
    {
      "name": "funkcionális követelmény",
      "engNames": ["functional requirement"],
      "desc":
        "olyan követelmény, amely a szoftverrel szemben támasztott funkcionális elvárást írja le."
    },
    {
      "name": "funkcionális teszt",
      "engNames": ["functional testing"],
      "desc": "a rendszer funkcionális specifikációján alapuló teszt."
    },
    {
      "name": "használati eset teszt",
      "engNames": ["use case testing"],
      "desc":
        "olyan feketedoboz teszttervezési technika, amelyekben a műszaki tesztterveket (test design) különböző használati eset forgatókönyvek futtatására készítették."
    },
    {
      "name": "használhatósági teszt",
      "engNames": ["usability testing"],
      "desc":
        "annak meghatározása, hogy a szoftvertermék mennyire érthető meg, mennyire könnyű megtanulni használatát és milyen könnyen kezelhető, ezáltal - meghatározott feltételek mentén - mennyire felhasználóbarát."
    },
    {
      "name": "határérték elemzés",
      "engNames": ["boundary value analysis"],
      "desc":
        "a program változóinak, illetve paramétereinek szélsőértékelemzésén alapuló feketedoboz teszttervezési technika."
    },
    {
      "name": "hatáselemzés",
      "engNames": ["impact analysis"],
      "desc":
        "a szoftverváltozás kihatásának elemzése a fejlesztési dokumentáció, a teszt dokumentáció, illetve a komponensek tekintetében, a követelmények változásainak megvalósítása érdekében."
    },
    {
      "name": "hibakeresés",
      "engNames": ["debugging"],
      "desc":
        "a szoftver meghibásodás okainak megtalálási, analizálási és eltávolítási folyamata."
    },
    {
      "name": "hibakereső eszköz",
      "engNames": ["debugging tool"],
      "desc":
        "a programozó által használt eszköz a külső hibák reprodukálására, elemzésére és a hibák okainak megtalálására. A hibakereső eszközök lehetővé teszik a program lépésenkénti végrehajtását, illetve bármely utasításánál történő megállítását, valamint a programváltozók vizsgálatát és beállítását."
    },
    {
      "name": "hibasejtés",
      "engNames": ["error guessing"],
      "desc":
        "olyan műszaki teszttervezési módszer, amely során a tesztelők tapasztalata alapján próbálják megsejteni a tesztelendő szoftverben levő hibákat, illetve ez alapján próbálnak megfelelő teszteket tervezni."
    },
    {
      "name": "hibasűrűség",
      "engNames": ["defect density", "fault density"],
      "desc":
        "a szoftverben azonosított hibák aránya a szoftver méretéhez viszonyítva (ez utóbbi szabványos mértékegységben kifejezve, mint pl. a kódsorok, vagy az osztályok, illetve funkciópontok száma)."
    },
    {
      "name": "hibatámadás",
      "engNames": ["attack", "fault attack"],
      "desc":
        "célzott próbálkozás a teszt tárgyának minőségének, különösképpen a megbízhatóságának meghatározására azáltal, hogy speciális meghibásodásokat próbálunk meg szándékosan előidézni."
    },
    {
      "name": "hordozhatósági teszt",
      "engNames": ["portability testing"],
      "desc":
        "egy szoftvertermék hordozhatóságra vonatkozó tesztelés folyamata."
    },
    {
      "name": "incidens",
      "engNames": ["incident"],
      "desc": "bármely olyan történés, amely vizsgálódást tesz szükségessé."
    },
    {
      "name": "incidensjelentés",
      "engNames": ["incident report"],
      "desc":
        "olyan dokumentum, amely minden, pl. a tesztelés alatt bekövetkezett incidenst tartalmaz, amely vizsgálatot tesz szükségessé."
    },
    {
      "name": "incidens naplózása",
      "engNames": ["incident logging"],
      "desc":
        "bármely bekövetkezett incidens feljegyzése, pl. a tesztelés alatt."
    },
    {
      "name": "incidens menedzsment",
      "engNames": ["incident management"],
      "desc":
        "az incidensek felismerésének, vizsgálatának, a különböző intézkedések és rendelkezések szervezésének folyamata. Magába foglalja az incidens loggolását, osztályozását és kihatásának vizsgálatát."
    },
    {
      "name": "incidens menedzsment eszköz",
      "engNames": ["incident management tool"],
      "desc":
        "olyan eszköz, amely megkönnyíti az incidensek felismerését és állapotainak nyomonkövetését. Gyakran munkafolyamatközpontú annak érdekében, hogy az incidens allokációját, javítását és újratesztelését támogassa, illetve hogy támogassa a jelentéskészítést."
    },
    {
      "name": "informális felülvizsgálat",
      "engNames": ["informal review"],
      "desc":
        "olyan felülvizsgálat, amely nem formális (dokumentált) eljáráson alapul."
    },
    {
      "name": "inkrementális fejlesztési modell",
      "engNames": ["incremental development model"],
      "desc":
        "fejlesztési életciklus modell, ahol a projekt részét alkotó kis lépések mindegyike egy kis részt tesz hozzá az általános projektkövetelményekhez. A követelményeket priorizálják és a megfelelő inkrementális egységben a prioritási sorrend szerint szállítják. Ezen életciklusmodell néhány (de nem minden) verziójában minden alprojekt egy „mini V-modell” szerint működik, saját tervezési, megvalósítási és tesztelési fázisokkal."
    },
    {
      "name": "inspekció",
      "engNames": ["inspection"],
      "desc":
        "az egyenrangú felülvizsgálat egy típusa, amely a dokumentum vizuális vizsgálatán alapul, hogy megtaláljuk a hibákat, vagy pl. a szabványokhoz képest meglevő különbségeket, illetve a magasabb szintű dokumentációktól való eltéréseket. A leginkább formális felülvizsgálati módszer, amely emiatt mindig dokumentált eljáráson alapul."
    },
    {
      "name": "integráció",
      "engNames": ["integration"],
      "desc":
        "a komponensek, vagy rendszerek nagyobb egységbe történő összeolvasztásának folyamata."
    },
    {
      "name": "integrációs teszt",
      "engNames": ["integration testing"],
      "desc":
        "olyan teszt, amelynek célja az integrált egységek közötti interfészekben, illetve köcsönhatásokban lévő hibák megtalálása."
    },
    {
      "name": "iteratív fejlesztési modell",
      "engNames": ["iterative development model"],
      "desc":
        "olyan fejlesztési életciklus, amely során a projektet nagyszámú iterációk sorozatára bontják. Egy iteráció egy olyan teljes fejlesztési ciklus, amely egy végrehajtható termék (belső, vagy külső) kiadását eredményezi, a végső termék egy részhalmazát, amely iterációról iterációra növekedve válik a végső termékké."
    },
    {
      "name": "jegyzőkönyv vezető",
      "engNames": ["scribe", "recorder"],
      "desc":
        "az a személy, aki naplózott formában rögzíti a felülvizsgálat során megemlített összes hibát és azokat a javaslatokat, amik a folyamat javítására irányulnak. A jegyzőkönyv vezetőnek biztosítani kell, hogy a naplózás olvasható és érthető legyen."
    },
    {
      "name": "karbantartási teszt",
      "engNames": ["maintenance testing"],
      "desc":
        "módosítások vagy megváltozott környezet miatt a működő rendszeren végrehajtott teszt."
    },
    {
      "name": "karbantarthatósági teszt",
      "engNames": ["maintainability testing"],
      "desc":
        "teszteljárás egy alkalmazás karbantarthatóságának meghatározására."
    },
    {
      "name": "kilépési feltétel",
      "engNames": ["exit criteria"],
      "desc":
        "általános és speciális feltételek halmaza, amelyet minden érintettel egyeztetve egy folyamat hivatalos befejezési feltételének tekintünk. A célja, hogy megakadályozzuk az olyan feladatok befejezettnek tekintését, amelyeknek még vannak függőben levő, be nem fejezett részei. A kilépési feltételeket a tesztelés leállításának tervezéséhez és jelentéséhez használjuk."
    },
    {
      "name": "kimerítő teszt",
      "engNames": ["exhaustive testing"],
      "desc":
        "olyan teszt, amely során a tesztkészletünk magába foglalja a bemeneti értékek és előfeltételek összes kombinációját."
    },
    {
      "name": "kockázat",
      "engNames": ["risk"],
      "desc":
        "az a tényező, amely a jövőben negatív következményeket okozhat. Általában, mint hatás és valószínűség jelenik meg."
    },
    {
      "name": "kockázat-alapú teszt",
      "engNames": ["risk-based testing"],
      "desc":
        "a tesztelés egy olyan megközelítése, mely csökkenti a termék kockázati szintjét és tájékoztatja az érintetteket a kockázat mértékéről már a projekt kezdeti fázisában. Magában foglalhatja mind a termék kockázatainak azonosítását, mind a tesztfolyamat kockázat szerinti vezetését."
    },
    {
      "name": "komplexitás",
      "engNames": ["complexity"],
      "desc":
        "a szoftver tervének, illetve illetve belső struktúrájának összetettsége megértés, karbantartás, valamint verifikálás szempontjából."
    },
    {
      "name": "komponens teszt",
      "engNames": ["component testing"],
      "desc": "az egyes szoftverkomponensek tesztje."
    },
    {
      "name": "konfiguráció menedzsment",
      "engNames": ["configuration management"],
      "desc":
        "a következő tevékenységek technikai és adminisztratív irányítása: a konfigurációs elemek funkcionális és fizikai karakterisztikáinak meghatározása és dokumentálása, az ezen karakterisztikákhoz képest történő változás irányítása, a változáskezelési és megvalósítási állapot nyomon követése és jelentése, illetve a különböző követelményeknek történő megfelelés."
    },
    {
      "name": "konfiguráció menedzsment eszköz",
      "engNames": ["configuration management tool"],
      "desc":
        "olyan eszköz, amely támogatja a konfigurációs elemek meghatározását és irányítását, ezek változásainak, illetve verzióinak, státuszainak nyomon követését, illetve felügyeli az ezeket tartalmazó alapverziók kiadását."
    },
    {
      "name": "kód lefedettség",
      "engNames": ["code coverage"],
      "desc":
        "elemző módszer, amely meghatározza, hogy a szoftver mely részei lettek végrehajtva (lefedve) a teszt végrehajtása során, és melyek nem. Például: utasítás lefedettség, döntési lefedettség, feltétel lefedettség."
    },
    {
      "name": "követelmény",
      "engNames": ["requirement"],
      "desc":
        "olyan feltétel vagy képesség, amely a felhasználó számára azért szükséges, hogy megoldjon egy problémát,vagy elérjen egy célt. Ezen feltételnek vagy képességnek a rendszer vagy rendszer komponens által is megvalósíthatónak kell lennie úgy, hogy közben a szerződés, szabvány, specifikáció és egyéb formális dokumentumban támasztott követelményeknek is megfeleljen."
    },
    {
      "name": "követelmény-menedzsment eszköz",
      "engNames": ["requirements management tool"],
      "desc":
        "olyan eszköz, amely támogatja a követelmények, a követelmény jellemzőinek (pl. prioritás, tudás gazda) rögzítését és magyarázó jegyzetek készítését, valamint megkönnyíti a különböző szintű követelmények nyomon követhetőségét és változás menedzsmentjét. Vannak olyan követelmény-menedzsment eszközök, melyek a statikus elemzéshez is segítséget nyújtanak, például konzisztencia ellenőrzéssel vagy előre definiált, követelményekre vonatkozó szabályokkal."
    },
    {
      "name": "kulcsszó-alapú teszt",
      "engNames": ["action word-driven testing", "keyword-driven testing"],
      "desc":
        "egy olyan, szkripteken alapuló tesztelési technológia, amelynél a teszt-szkriptekben nemcsak tesztadatok és az elvárt eredmény található, hanem az alkalmazással kapcsolatos vezérlő kulcsszavak is. Az akciószavak értelmezését a teszthez tartozó vezérlő szkriptek által meghívott speciális támogató szkriptek végzik."
    },
    {
      "name": "lefedettségi eszköz",
      "engNames": ["coverage tool"],
      "desc":
        "olyan eszköz, amely objektíven méri, hogy mely strukturális elemeket – pl. utasításokat, elágazásokat - hajt végre a tesztkészlet."
    },
    {
      "name": "megbízhatósági teszt",
      "engNames": ["reliability testing"],
      "desc":
        "a teszt folyamata meghatározza egy szoftvertermék megbízhatóságát."
    },
    {
      "name": "meghajtó",
      "engNames": ["driver"],
      "desc":
        "egy szoftver komponens, vagy teszt eszköz, amely kiváltja azt a komponenst, amely egy másik komponens, vagy a rendszer vezérlését, és/vagy felhívását végzi."
    },
    {
      "name": "meghibásodás",
      "engNames": ["failure"],
      "desc":
        "a komponens, illetve a rendszer eltér az elvárt eredménytől, vagy szolgáltatástól."
    },
    {
      "name": "meghibásodás arány",
      "engNames": ["failure rate"],
      "desc":
        "adott kategóriájú meghibásodások aránya egy adott mértékegységben kifejezve, pl. időegységhez, a tranzakciók számához, vagy a futó gépek számához viszonyítva."
    },
    {
      "name": "metrika",
      "engNames": ["metric"],
      "desc": "méréseknél használatos skála és mérési módszertan."
    },
    {
      "name": "minőség",
      "engNames": ["quality"],
      "desc":
        "az a szint, amikor a komponens, rendszer vagy folyamat megfelel a meghatározott követelményeknek és/vagy a felhasználó/ügyfél igényeinek és elvárásainak."
    },
    {
      "name": "műszaki teszttervezés",
      "engNames": ["test design"],
      "desc":
        "(1) Lásd műszaki tesztterv (test design) specifikáció (2) Az általános tesztcélok átalakítása mérhető tesztfeltételekké és tesztesetekké"
    },
    {
      "name": "műszaki teszttervezési technika",
      "engNames": ["test design technique"],
      "desc":
        "a tesztesetek készítésére, származtatására és kiválasztására alkalmazott eljárás."
    },
    {
      "name": "műszaki teszttervező eszköz",
      "engNames": ["test design tool"],
      "desc":
        "a műszaki teszttervezési tevékenységet támogató eszköz, amely tesztbemeneteket generál egyéb forrásokból, pl. CASE eszközökből, követelmény menedzsment eszközökből, tesztfeltételekből valamint magából a programkódból."
    },
    {
      "name": "nem-funkcionális követelmény",
      "engNames": ["non-functional requirement"],
      "desc":
        "olyan követelmény, amely a funkcionalitáshoz nem, de a megbízhatósághoz, hatékonysághoz, használhatósághoz, karbantarthatósághoz és hordozhatósághoz kapcsolódik."
    },
    {
      "name": "nyomonkövethetőség",
      "engNames": ["traceability"],
      "desc":
        "a dokumentáció és a szoftver összefüggő egységeinek vizsgálata, pl. a követelmények és a hozzájuk tartozó tesztesetek közötti kapcsolatra. Lásd függőleges nyomonkövethetőség, vízszintes nyomonkövethetőség."
    },
    {
      "name": "nyomonkövethetőségi mátrix",
      "engNames": ["traceability matrix"],
      "desc":
        "olyan kétdimenziós táblázat, amely két entitást feleltet meg egymásnak (pl. a követelmények és a tesztesetek). Oda-vissza lehetővé teszi a nyomonkövetést egyik entitásról a másikra, ezáltal lehetővé válik a lefedettség meghatározása, valamint a tervezett változások kihatásainak értékelése."
    },
    {
      "name": "összefoglaló tesztjelentés",
      "engNames": ["test summary report"],
      "desc":
        "a teszttevékenységeket és eredményeket tartalmazó dokumentum. Ebben a dokumentumban található a kilépési feltételeknek megfelelően ellenőrzött tesztelemek kiértékelése is."
    },
    {
      "name": "programhiba",
      "engNames": ["bug", "defect", "fault"],
      "desc":
        "a program olyan belső hibája, amely azt eredményezheti, hogy a szoftver nem tudja teljesíteni az elvárt viselkedését, azaz a program meghibásodásához vezethet."
    },
    {
      "name": "projektkockázat",
      "engNames": ["project risk"],
      "desc":
        "egy (teszt) projekt menedzsmentjénél, iránytásánál felmerülő kockázat, mint például emberhiány, szoros határidők, változó követelmények, stb."
    },
    {
      "name": "ETAE regressziós teszt",
      "engNames": ["regression testing"],
      "desc":
        "egy korábban már tesztelt program módosítást követő tesztelése annak biztosítása érdekében, hogy a módosítás nem okozott hibát a szoftver nem módosított részeiben. A teszt végrehajtása a szoftver vagy a szoftverkörnyezet változtatásakor történik."
    },
    {
      "name": "rendszerteszt",
      "engNames": ["system testing"],
      "desc":
        "integrált rendszer tesztje abból a célból, hogy ellenőrizzük a követelményeknek való megfelelőséget."
    },
    {
      "name": "robosztussági teszt",
      "engNames": ["robustness testing"],
      "desc":
        "egy szoftvertermék robosztusságának meghatározására vonatkozó teszt."
    },
    {
      "name": "stabilitás",
      "engNames": ["stability"],
      "desc":
        "a szoftvertermék azon képessége, hogy a szoftverben történt módosítások nem várt hatásait elkerülje."
    },
    {
      "name": "statikus teszt",
      "engNames": ["static testing"],
      "desc":
        "egy komponens vagy rendszer szoftver elemeinek – pl. követekemények szoftver műszaki terv, vagy kód - tesztje specifikáció vagy megvalósítási szinten a szoftver futtatása nélkül. Például felülvizsgálat, vagy statikus forráskód elemzés."
    },
    {
      "name": "stressz teszt",
      "engNames": ["stress testing"],
      "desc":
        "olyan teljesítményteszt típus, amikor úgy vizsgálunk egy komponenst vagy rendszert, hogy az előre elvárt vagy annál nagyobb terheléssel, vagy csökkentett erőforrás rendelkezésre bocsátással teszteljük - például korlátozott szerver, vagy memória hozzáféréssel."
    },
    {
      "name": "stressz teszteszköz",
      "engNames": ["stress testing tool"],
      "desc": "stressz tesztet támogató eszköz."
    },
    {
      "name": "szkript nyelv",
      "engNames": ["scripting language"],
      "desc":
        "a tesztvégrehajtási eszközök (pl. felvevő/lejátszó eszközök) által is használt programozási nyelv, amiben futtatható teszt szkripteket lehet írni."
    },
    {
      "name": "technikai felülvizsgálat",
      "engNames": ["technical review"],
      "desc":
        "egyenrangú résztvevők csoportos megbeszélése, akik a technikai megközelítés tekintetében törekednek a közös álláspont kialakítására"
    },
    {
      "name": "teljesítményteszt",
      "engNames": ["performance testing"],
      "desc":
        "tesztelési folyamat, mellyel a szoftvertermék teljesítményét lehet meghatározni."
    },
    {
      "name": "teljesítményteszt eszköz",
      "engNames": ["performance testing tool"],
      "desc":
        "teljesítményteszthez alkalmazott eszköz, melynek két különböző képessége van: terhelést generál és méri a tranzakciók számát. Az eszköz terhelést generál több felhasználó szimulációjával, illetve nagy mennyiségű bemenő adatot elküldésével. A futás során kiválasztott tranzakciók válaszidejét mérik és naplózzák, amelyből általában a terhelés és a válaszidő kapcsolatát leíró napló file-okon és ábrákon alapuló jelentések készülnek."
    },
    {
      "name": "terheléses teszt",
      "engNames": ["load testing"],
      "desc":
        "a teljesítményteszt azon típusa, amely a komponens vagy rendszer viselkedését vizsgálja növekedő terhelés alatt (például a felhasználók számának, vagy kérések számának növelésekor). A teszt célja, hogy kiderüljön, a komponens vagy rendszer hogyan reagál a magas terhelésre (lefagy, nő a válaszidő, stb.)."
    },
    {
      "name": "termékkockázat",
      "engNames": ["product risk"],
      "desc":
        "a teszt tárgyához (magához a termékhez) közvetlenül kapcsolódó kockázat."
    },
    {
      "name": "teszt összehasonlító eszköz",
      "engNames": ["test comparator"],
      "desc":
        "egy teszteszköz, amellyel a teszt elvárt és aktuális eredményeit automatikusan össze lehet hasonlítani."
    },
    {
      "name": "tesztadat",
      "engNames": ["test data"],
      "desc":
        "olyan adat, amely a teszt előtt is létezik (például egy adatbázisban) és amely kölcsönhatásban van a tesztelés alatt álló rendszerrel, vagy a rendszerkomponenssel."
    },
    {
      "name": "tesztadat előkészítő eszköz",
      "engNames": ["test data preparation tool"],
      "desc":
        "olyan teszteszköz, amellyel a teszteléshez adatot állíthatunk elő egy már meglévő adatbázisból. Az eszköz alkalmas lehet egyéb adatok generálására, adatok manipulálására, valamint szerkesztésére is."
    },
    {
      "name": "tesztbázis",
      "engNames": ["test basis"],
      "desc":
        "az összes olyan dokumentum, amelyből a komponensekre vagy rendszerekre vonatkozó követelmények származnak. Ezek azok a dokumentumok, amelyeken a tesztesetek alapulnak. Ha egy ilyen dokumentumot csak formális változáskezelési folyamat során módosíthatnak, a tesztbázist ún. fagyasztott tesztbázisnak nevezik."
    },
    {
      "name": "tesztcél",
      "engNames": ["test objective"],
      "desc": "a műszaki teszttervezés, illetve tesztvégrehajtás célja."
    },
    {
      "name": "tesztelés",
      "engNames": ["testing"],
      "desc":
        "az összes szoftverfejlesztési életciklushoz kapcsolódó akár statikus, akár dinamikus folyamat, amely kapcsolatban áll a szoftvertermékek tervezésével, elkészítésével és kiértékelésével, hogy megállapítsa, hogy a szoftvertermék teljesíti-e a meghatározott követelményeket, megfelel-e a célnak. A tesztelés felelős a szoftvertermékkel kapcsolatos hibák megtalálásáért."
    },
    {
      "name": "tesztelési alapkörnyezet",
      "engNames": ["test harness"],
      "desc":
        "a teszt végrehajtásához szükséges, a meghajtókat és csonkokat tartalmazó tesztkörnyezet."
    },
    {
      "name": "teszteljárás specifikáció",
      "engNames": ["test procedure specification"],
      "desc":
        "a teszt futtatásának tevékenységsorozatát rögzítő dokumentum. Teszt szkript illetve manuális teszt szkript néven is ismert."
    },
    {
      "name": "tesztfeltétel",
      "engNames": ["test condition", "test situation"],
      "desc":
        "a rendszer egy olyan eleme, vagy eseménye, amelyet egy tesztesettel ellenőrizni lehet, például funkció, tranzakció, jellemző, minőségi attribútum vagy strukturális elem."
    },
    {
      "name": "tesztelési irányelvek",
      "engNames": ["test policy"],
      "desc":
        "magas szintű dokumentum, amely a szervezet elveit, megközelítésmódját, valamint céljait mutatja be a tesztelésre vonatkozóan."
    },
    {
      "name": "tesztelési megközelítés",
      "engNames": ["test approach"],
      "desc":
        "a tesztstratégia megvalósítása egy konkrét projektre. Jellemzően a projekt céljain és a kockázatelemzésen alapuló döntéseket, a tesztfolyamatok kiindulópontjait, az alkalmazandó műszaki teszttervezési technikákat, belépési és kilépési kritériumokat valamint a tesztelés fajtáit tartalmazza."
    },
    {
      "name": "tesztelő",
      "engNames": ["tester"],
      "desc":
        "egy képzett szakértő, aki a rendszer vagy rendszerkomponens tesztelésében vesz részt."
    },
    {
      "name": "teszteset",
      "engNames": ["test case"],
      "desc":
        "bemeneti értékek, végrehajtási előfeltételek, elvárt eredmények és végrehajtási utófeltételek halmaza, amelyeket egy konkrét célért vagy a tesztért fejlesztettek (például egy program forgatókönyv végrehajtása, vagy egy követelménynek való megfelelés)."
    },
    {
      "name": "teszteset specifikáció",
      "engNames": ["test case specification"],
      "desc":
        "egy tesztelemre vonatkozó, a teszteseteket leíró dokumentáció (cél, bemenetek, teszttevékenységek, elvárt eredmények, végrehajtás előfeltételei)"
    },
    {
      "name": "tesztirányítás",
      "engNames": ["test control"],
      "desc":
        "egy olyan tesztmenedzseri feladat, amelynek során javító intézkedéseket fejlesztünk és alkalmazunk annak érdekében, hogy a tesztprojektet visszatereljük a tervezett pályára, amennyiben a tesztelés felügyelete során a tervektől való eltérést tapasztalunk."
    },
    {
      "name": "tesztjelentés készítés",
      "engNames": ["test reporting"],
      "desc":
        "a teszttevékenységek során keletkezett adatok összegyűjtése és elemzése, ezt követően az adatokból az érintettek számára egy jelentés készítése."
    },
    {
      "name": "tesztkörnyezet",
      "engNames": ["test bed", "test environment", "test rig"],
      "desc":
        "a tesztelést támogató eszközök együttese, beleértve minden hardver és szoftver eszközt."
    },
    {
      "name": "tesztmenedzser",
      "engNames": ["test manager"],
      "desc":
        "a teszttevékenységekért, erőforrások menedzseléséért valamint a teszt tárgyának értékeléséért felelős személy. A tesztmenedzser irányítja, adminisztrálja, tervezi és menedzseli a teszt tárgyának vizsgálatát."
    },
    {
      "name": "tesztmenedzsment eszköz",
      "engNames": ["test management tool"],
      "desc":
        "olyan szoftver eszköz, amely támogatja a teszt menedzsmentet és irányítja a tesztfolyamat egy részét. Gyakran rendelkezik olyan funkciókkal, mint a tesztelési környezet menedzsmentje, tesztek ütemezése, eredmények naplózása, folyamatkövetés, hibakezelés és teszteredmények jelentése."
    },
    {
      "name": "tesztnapló",
      "engNames": ["test log", "test record"],
      "desc": "a tesztvégrehajtáshoz kapcsolódó részletek időrendi rögzítése."
    },
    {
      "name": "tesztstratégia",
      "engNames": ["test strategy"],
      "desc":
        "magas szintű dokumentum, amely a végrehajtandó tesztszinteket írja le, valamint azok részleteit tartalmazza a szervezetre vagy a programra (egy vagy több projektre) vonatkozóan."
    },
    {
      "name": "tesztszint",
      "engNames": ["test level", "test stage"],
      "desc":
        "közös szervezés és menedzsment alatt álló teszttevékenységek csoportja. A tesztszint felelősségi körökhöz kapcsolódik a projekten belül. Tesztszintekre példa a komponens-teszt, integrációs teszt, rendszerteszt és felhasználó teszt."
    },
    {
      "name": "tesztszkript",
      "engNames": ["test script"],
      "desc":
        "legtöbbször teszteljárás specifikációra használt kifejezés, elsősorban automatizált teszt esetén."
    },
    {
      "name": "tesztterv (test plan)",
      "engNames": ["test plan"],
      "desc":
        "a teszt hatáskörét, megközelítését, erőforrásait valamint a tevékenységek tervezett ütemezését tartalmazó dokumentum. Ezen kívül meghatározza a tesztelemeket, a tesztelendő funkciókat, feladatokat, a tesztet végrehajtó személyek függetlenségét, a tesztkörnyezetet, a műszaki teszttervezési technikákat, a belépési és kilépési feltételeket, valamint kockázatokat. A teszttervezési folyamat meghatározó dokumentuma"
    },
    {
      "name": "tesztver",
      "engNames": ["testware"],
      "desc":
        "a tesztfolyamat során keletkezett különböző termékek, például dokumentáció, programkód, inputok, elvárt eredmények, eljárások, fájlok, adatbázisok, környezetek illetve bármilyen egyéb szoftver."
    },
    {
      "name": "tesztvezérelt fejlesztés",
      "engNames": [
        "test-driven development (TDD)",
        "test-driven development (TDD)"
      ],
      "desc":
        "szoftverfejlesztési módszertan, amelyben a teszteseteket azelőtt készítik el (és többnyire automatizálják), mielőtt a szoftver fejlesztési folyamata befejeződne, és le lehetne futtatni a teszteket."
    },
    {
      "name": "tesztvégrehajtás",
      "engNames": ["test execution"],
      "desc":
        "a rendszeren vagy annak komponensén végzett tesztfolyamat, amelyből megkapjuk az aktuális eredményeket."
    },
    {
      "name": "tesztvégrehajtási eszköz",
      "engNames": ["test execution tool"],
      "desc":
        "olyan teszteszköz, amelynek segítségével másik szoftvert futtathatunk egy automatizált szkript (pl. felvétel/lejátszás) segítségével."
    },
    {
      "name": "utasítás lefedettség",
      "engNames": ["statement coverage"],
      "desc": "a tesztkészlet által kipróbált futtatható utasítások százaléka."
    },
    {
      "name": "újratesztelés",
      "engNames": ["re-testing"],
      "desc":
        "olyan teszt, amikor azokat a teszteseteket futtatjuk, amelyek a legutóbbi tesztfuttatásnál elbuktak. Célja a hibajavítás sikerességének ellenőrzésére."
    },
    {
      "name": "validáció",
      "engNames": ["validation"],
      "desc":
        "annak vizsgálata és konfirmálása, hogy a szoftver tervezett felhasználási céljának megfelelő követelmények teljesülnek-e."
    },
    {
      "name": "verifikáció",
      "engNames": ["verification"],
      "desc":
        "az adott követelmények teljesülésének vizsgálata és konfirmálása."
    },
    {
      "name": "vezérlési folyam",
      "engNames": ["control flow"],
      "desc": "az események (útvonalak) sorrendje a végrehajtás során."
    },
    {
      "name": "V-modell",
      "engNames": ["V-model"],
      "desc":
        "egy keretrendszer a szoftverfejlesztési ciklus részletes leírására, a követelményspecifikációtól kezdve az üzemeltetésig. Az V-modell illusztrálja, hogy a teszttevékenység hogyan illeszthető a szoftverfejlesztési életciklusok bármely fázisába."
    }
  ]
}
